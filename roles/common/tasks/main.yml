- name: Create necessary system groups
  group:
    name: "{{ item.name }}"
  with_items:
    - "{{ os_groups }}"

- name: Create necessary system users
  user:
    name: "{{ item.name }}"
    shell: "/bin/bash"
  with_items:
    - "{{ os_users }}"

- name: Update package cache
  ansible.builtin.package:
    update_cache: true
    
- name: Install Python and pip
  package:
    name: "{{ item }}"
    state: present
  become: true
  loop:
    - python3
    - python3-pip
    - python3-psycopg2
    - virtualenv
    - libpq-dev

- name: Upgrade OS packages
  ansible.builtin.apt:
    name: "*"
    state: latest
    update_cache: yes

# - name: Check if a reboot is required
#   ansible.builtin.stat:
#     path: /var/run/reboot-required
#     get_checksum: no
#   register: reboot_required_file

# - name: Reboot the server (if required).
#   ansible.builtin.reboot:
#     reboot_timeout: 900
#   when: reboot_required_file.stat.exists == true

- name: Install dependencies
  ansible.builtin.apt:
    name:
      - git
      - gcc
      - make
      - tar
      - vim
      - wget
      - libncursesw5-dev
      - libssl-dev
      - libsqlite3-dev
      - tk-dev
      - libgdbm-dev
      - libc6-dev
      - libbz2-dev
      - libffi-dev
      - zlib1g-dev
      - build-essential
      - liblzma-dev
      - tcl-dev
    state: present
    update_cache: yes
  become: true
  retries: 3
  delay: 3

- name: Download Python source archive
  ansible.builtin.get_url:
    dest: "{{ python_src_dir }}"
    url: "{{ python_url }}"

- name: Extract archive
  ansible.builtin.unarchive:
    src: "{{ python_src_dir }}/{{ python_archive }}"
    dest: "{{ python_src_dir }}"
    remote_src: true

- name: Run ./configure
  ansible.builtin.command:
    cmd: ./configure --enable-optimizations --prefix=/usr/local --enable-shared LDFLAGS="-Wl,-rpath /usr/local/lib"
    chdir: "{{ python_src_dir }}/Python-{{ python_release }}"
    creates: "{{ python_src_dir }}/Python-{{ python_release }}/config.log"

- name: Run make to build python
  community.general.make:
    chdir: "{{ python_src_dir }}/Python-{{ python_release }}"
  register: make_result

- name: Run make install
  community.general.make:
    chdir: "{{ python_src_dir }}/Python-{{ python_release }}"
    target: altinstall
  register: install_result
  when: make_result is not skipped